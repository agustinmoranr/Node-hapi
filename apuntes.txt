Clase 1: Node js con hapi
    ¿Qué es hapi?
        Hapi es un framework de node que nos sirve para crear aplicaciones y 
        servicios web
        - Diseñados para proyectos grandes ya que esta pensado en aplicativos modulares
        -Se basa en separar la configuración de la lógica de negocios
        -Hay una forma definida de como deben ocurrir las cosas en el código.

    Principales Usos:
        -Aplicativos web 
        -Api Rest :REST es cualquier interfaz entre sistemas que use HTTP para obtener 
                   datos o generar operaciones sobre esos datos en todos los formatos 
                   posibles, como XML y JSON
        -Apis GraphQL: Lenguaje de consulta para API's
        -Http Proxies
        -Integrador de múltiples backends

Clase 2: Historia y estado actual.
    Hapi es creado por Eran Hammer. Hammer trabajaba en el equipo de movil de walmart 
    y la empresa sufría con la alta demanda en los días de black friday.
    Por lo que comienzan desarrollando hapi como un middleware para express, pero al no
    ser lo suficientemente rentable, trabajan con director (otro framework) y al final 
    deciden crear todo el framework desde cero, partiendo de la premisa de que es 
    más importante la configuración que el código.
        datos curiosos 
            El nombre "Hapi" es derivado de "Http Api server"
            Eran Hammer también es quien desarrollo la especificación Oauth
            Oauth nos permite hacer loggin con servicios externos como facebook o google

Clase 4: El objeto h
    h Es un objeto que contiene las propiedades y utilidades necesarias para para definir
    la información que le vamos a enviar al header 
    tiene varios métodos, estos son los básicos
        h.response
            h.reponse crea el Objeto Response, el cual tiene las propiedades para definir
            los headers, type, y el status de la petición 
            .header() .type() .code()
        h.redirect
            h.redirect('url_a_re-direccionar') --> te re-direcciona a otro sitio

Clase 5: plugins- añadiendo archivos estáticos
    Los plugins son módulos creados por terceros que le añaden o extienden funcionalidades
    a un framework o librería

Clase 6: Plantillas con handlerbars
    handlerbars es un motor de plantillas que nos permite inyectarle lógica a nuestros 
    archivos html a partir de variables para que estos sean más dinámicos.

    Los motores de plantillas responden a un tipo de sintaxis muy especifico, en el
    caso de handlerbars para declarar una variable se utilizan llaves dobles {{}}
    Y para declarar un bloque de instrucción (como if/each/etc) comienza con "#"
     y se cierra con "/" 

    ejemplo 
    
        <div class=""post"">
            <h1>Author: {{fullName author}}</h1>
            <div class=""body"">{{body}}</div>

            <h1>Comments</h1>

            {{#each comments}}
                <h2>By {{fullName author}}</h2>
                <div class=""body"">{{body}}</div>
            {{/each}}
        </div>

        {
            fullName author: "Agustín Moran Rivas"
        }

                // Author: Agustín Moran Rivas
                    Comments
                        by: Agustín Moran Rivas //
http://handlebarsjs.com/guide/#what-is-handlebars // Api documentación

Clase 7: Renderizado de vistas
    Documentación de @hapi/vision 
    https://hapi.dev/module/vision/

Clase 8: Recibiendo parámetros en un ruta post.
    El objeto "request" nos permite obtener información de la petición hecha por el cliente
    y es el primero parámetro que recibe la ruta
    Ahora... El objeto request cuenta con varias propiedades 
        request.path --> La ruta accedida

        request.method --> método usado en la petición (get, post, put, delete) 

        request.params --> parámetros incluidos en la url

        request.query --> Parámetros incluidos en el query de la URL 

        request.paylaod --> valor de los parámetros recibidos en peticiones POST y PUT

    Ciclo de vida 
        A la hora de hacer un request, el objeto request tiene varios eventos que nosotros 
        podemos escuchar y ejecutar código en alguna de esas etapas.
        Estos son algunos de los eventos:
            OnRequest
            OnPreAuth
            OnCredentials
            OnPostAuth
            OnPreHandler
            OnPostHandler
            OnPreResponse

CLASE 9: Definiendo una mejor estructura del proyecto.
    Es importante implementar una buena desde el     comienzo de un proyecto, para que este 
    sea muchísimo más legible, escalable, y sobre todo más organizado.

    El patrón MVC (Model vista controlador) es uno de los patrones de arquitectura más
    utilizados en el desarrollo backend y es el que utilizaremos en el proyecto.

CLASE 10: Validando la información con Joi 
    Si bien hacer validaciones de la informacion del cliente se hace desde el frontend
    es buena práctica hacerla también en el backend. Es por eso que hapi tiene un plugin 
    llamado joi, el cual nos permite hacer esquemas de las validaciones que necesitamos.
        npm i @hapi/joi
    Ejemplo de un Schema con joi

        const schema = Joi.object({
            a: Joi.string()
        });

    Api documentation for Joi https://hapi.dev/module/joi/#usage

Clase 12: Creando un modelo y almacenando en firebase.
    documentación..
        https://www.npmjs.com/package/firebase-admin --> firebase
        https://www.npmjs.com/package/bcrypt --> bcrypt

Clase 13: Implementando el login y validación del usuario
    Teniendo el modelo de Usuario ya definido, podemos pasar a la implementación del Login,
    para lo cual creamos una nueva vista y agregaremos un método en el controlador, además
    de las rutas correspondientes para el login y la validación de usuarios.

    Al hacer un query sobre los registros almacenados en Firebase, el resultado devuelto 
    es un objeto JSON con los resultados, en los que las keys de cada elemento corresponden
    con los IDs de cada usuario. Aún cuando el resultado devuelto es sólo un registro, 
    la estructura es la misma.

    Es importante tener en cuenta que al recuperar los datos desde Firebase, la contraseña 
    viene cifrada, por lo que la validación debe hacerse comparando ambos datos con bcrypt.
